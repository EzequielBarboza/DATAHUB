
##################### JDBC #####################################################

#
# Fully qualified name of the JDBC data source class used by the driver of the database
#
# @highlight
dataSource.className=org.hsqldb.jdbc.JDBCDataSource

#
# JDBC connection URL
#
# @highlight
dataSource.jdbcUrl=jdbc:hsqldb:mem:testDB

#
# Username to use for connection
#
# @highlight
dataSource.username=sa

#
# Password to use for connection
#
# @highlight
dataSource.password=
#
# JNDI name of data source
#
dataSource.jndiName=
#
# Maximum number of connections that will be contained in every partition
#
dataSource.maxConnections=36
#
# Minimum number of connections that will be contained in every partition
#
dataSource.minConnections=16
#
# Sets the maximum time (in milliseconds) to wait before a call to getConnection is timed out.
# Setting this to zero is similar to setting it to Long.MAX_VALUE Default: 0 ( = wait forever )
#
dataSource.connectionTimeoutInMs=5000

#
# Sets default auto commit mode
#
dataSource.defaultAutoCommit=true

# This sets the time (in seconds), for a connection to remain idle before sending
# a test query to the DB. This is useful to prevent a DB from timing out connections
# on its end. Do not use aggressive values here!
dataSource.idleConnectionTestPeriodInSeconds=14400

# The time (in seconds), for a connection to remain unused before it is closed off. Do not use aggressive values here! 
# Default: 60 minutes, set to 0 to disable.
dataSource.idleMaxAgeInSeconds=3600

# Sets statementsCacheSize setting.
# The number of statements to cache. 
dataSource.statementsCacheSize=0

# Useful when your application is doing lots of work on each connection
# (i.e. perform an SQL query, do lots of non-DB stuff and perform another query),
# otherwise will probably slow things down.
dataSource.releaseHelperThreads=3

# Sets number of statement helper threads to create that will handle releasing a statement.
# When this value is set to zero, the application thread is blocked until the pool and JDBC driver are able to close off the statement.
# When a non-zero value is set, the pool will create threads that will take care of closing off the statement asychronously to the application via the release helper
# threads).
# Useful when your application is opening up lots of statements otherwise will probably slow things down.
dataSource.statementReleaseHelperThreads=0

# When the available connections are about to run out, BoneCP will dynamically create new ones in batches. 
# This property controls how many new connections to create in one go (up to a maximum of maxConnectionsPerPartition). 
# Note: This is a per partition setting.
dataSource.acquireIncrement=5

# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a pool that has thread-affinity,
# i.e. pool[threadId % partition_count]. The higher this number, the better your performance will be for the case
# when you have plenty of short-lived threads. Beyond a certain threshold, maintenance of these pools will start
# to have a negative effect on performance (and only for the case when connections on a partition start running out).
dataSource.partitionCount=3

#
# Name used for the connection pool used by kernel.
# This name is handed to the underlying Hikari connection pool and used for logging and JMX export
#
connectionPool.name=kernel

#
# Enables the Export of MBeans for the HikariCP this is required for JMX monitoring.
#
connectionPool.registerMbeans=true

#
# Enables/disables collecting update statements and params which are then executed in a batch statement during update (true/false)
#
kernel.jdbc.batch.disabled=false
#
# Number of batched updates to accumulate before real execution (Oracle database only)
#
kernel.jdbc.batch.oracle.batchSize=50
#
# Number of rows that should be fetched (0 means default driver properties)
#
kernel.jdbc.fetchSize=0
#
# Maximum number of rows that will be fetched (0 means there is no limit)
#
kernel.jdbc.maxRows=0
#
# Optional. Schema name used to create objects. If left empty kernel will try to determine database schema automatically.
# If set to "null" no schema will be provided to the queries.
#
kernel.jdbc.schemaName=
#
# type:size of shemalesss attribute value column. Use any type from java.sql.Types
#
kernel.jdbc.schemalessAttributeType=VARCHAR:255
#
# delimitedIdentifierMode: overrides the default behaviour of platform-specific delimited identifier mode (e.g. double quotes around db entities)
# could accept values AUTO, true and false
#
kernel.jdbc.platform.delimitedIdentifierMode=AUTO
