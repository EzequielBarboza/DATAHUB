<!--
  ~ [y] hybris Platform
  ~
  ~ Copyright (c) 2000-2016 hybris AG
  ~ All rights reserved.
  ~
  ~ This software is the confidential and proprietary information of hybris
  ~ ("Confidential Information"). You shall not disclose such Confidential
  ~ Information and shall use it only in accordance with the terms of the
  ~ license agreement you entered into with hybris.
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- Composition rule handling -->
	<bean id="compositionRuleHandlerRegistry"
		  class="com.hybris.datahub.composition.impl.DefaultCompositionRuleHandlerRegistry"
		  autowire="byType" />

	<bean id="abstractCompositionRuleHandler"
		  class="com.hybris.datahub.composition.impl.AbstractCompositionRuleHandler" abstract="true">
		<property name="transformationExpressionProcessor" ref="transformationExprProcessor" />
		<property name="dataItemService" ref="dataItemService" />
	</bean>

	<bean id="localizedCompositionRuleHandler" class="com.hybris.datahub.composition.impl.LocalizedCompositionRuleHandler"
		  parent="abstractCompositionRuleHandler">
		<property name="order" value="1" />
	</bean>

	<bean id="collectionCompositionRuleHandler" class="com.hybris.datahub.composition.impl.CollectionCompositionRuleHandler"
		  parent="abstractCompositionRuleHandler">
		<property name="order" value="2" />
	</bean>

	<bean id="basicAttributeCompositionRuleHandler"
		  class="com.hybris.datahub.composition.impl.BasicAttributeCompositionRuleHandler"
		  parent="abstractCompositionRuleHandler">
		<property name="order" value="1000" />
	</bean>

	<bean id="compositionSetContinuationEventHandler"
		  class="com.hybris.datahub.composition.event.CompositionActionContinuationEventHandler">
		<property name="feedService" ref="dataHubFeedService" />
		<property name="eventPublicationService" ref="eventPublicationService" />
		<property name="autoCompositionDecisionStrategy" ref="autoCompositionDecisionStrategy" />
	</bean>
	<!-- End rule handlers -->

	<!-- chain runner of the composition handling -->
	<alias name="defaultCompositionStrategy" alias="compositionStrategy" />
	<bean id="defaultCompositionStrategy" class="com.hybris.datahub.composition.impl.CompositionChainRunnerStrategy">
		<property name="compositionRuleHandlerRegistry" ref="compositionRuleHandlerRegistry" />
		<property name="canonicalItemService" ref="canonicalItemService" />
		<property name="rawItemModelToDataConverter" ref="rawItemConverter" />
	</bean>

	<alias name="defaultCompositionService" alias="compositionService" />
	<bean id="defaultCompositionService" class="com.hybris.datahub.service.composition.impl.DefaultDataHubCompositionService">
		<property name="transformationDefinitionRepository" ref="canonicalTransformationDefinitionRepository" />
		<property name="groupingStrategy" ref="groupingStrategy" />
		<property name="compositionRunnerStrategy" ref="compositionStrategy" />
		<property name="canonicalItemService" ref="canonicalItemService" />
		<property name="rawItemService" ref="rawItemService" />
		<property name="compositionActionRepository" ref="compositionActionRepository" />
		<property name="publicationRetryRepository" ref="publicationRetryRepository" />
		<property name="canonicalItemRepository" ref="canonicalItemRepository" />
		<property name="transactionManger" ref="transactionManager" />
		<property name="useParallelStreams" value="${datahub.stream.parallel:true}" />
	</bean>

	<!-- key generation strategy -->
	<alias name="alphabeticalIntegrationKeyGenerationStrategy" alias="integrationKeyGenerationStrategy" />
	<bean name="alphabeticalIntegrationKeyGenerationStrategy"
		  class="com.hybris.datahub.composition.key.AlphabeticalIntegrationKeyGenerationStrategy">
	</bean>


	<!-- Grouping handling -->
	<bean id="groupingHandlerRegistry"
		  class="com.hybris.datahub.grouping.impl.DefaultGroupingHandlerRegistry"
		  autowire="byType" />

	<alias name="defaultGroupingStrategy" alias="groupingStrategy" />
	<bean id="defaultGroupingStrategy" class="com.hybris.datahub.grouping.impl.GroupingChainRunnerStrategy">
		<property name="groupingHandlerRegistry" ref="groupingHandlerRegistry" />
		<property name="platformTransactionManager" ref="transactionManager" />
		<property name="useParallelStreams" value="${datahub.stream.parallel:true}" />
	</bean>

	<bean id="publicationGroupingHandlerRegistry"
		  class="com.hybris.datahub.grouping.impl.DefaultPublicationGroupingHandlerRegistry"
		  autowire="byType"
			/>
	<alias name="defaultPubGroupingStrategy" alias="pubGroupingStrategy" />
	<bean id="defaultPubGroupingStrategy" class="com.hybris.datahub.grouping.impl.PublicationGroupingChainRunnerStrategy">
		<property name="handlerRegistry" ref="publicationGroupingHandlerRegistry" />
	</bean>

	<bean id="canonicalTypeGroupingHandler" class="com.hybris.datahub.grouping.impl.CanonicalTypeGroupingHandler">
		<property name="order" value="1" />
	</bean>

	<bean id="compositeKeyGroupingHandler" class="com.hybris.datahub.grouping.impl.CompositeKeyGroupingHandler">
		<property name="order" value="2" />
		<property name="rawItemKeyFactory" ref="rawItemKeyFactory" />
		<property name="expressionProcessor" ref="transformationExprProcessor" />
	</bean>

	<bean id="rawItemKeyFactory" class="com.hybris.datahub.grouping.impl.RawItemKeyFactory">
		<property name="expressionProcessor" ref="transformationExprProcessor" />
	</bean>

	<bean id="compositionRuleHandlerLoggerAspect" class="com.hybris.datahub.aop.CompositionRuleHandlerLogger" />

	<bean id="groupingHandlerLoggerAspect" class="com.hybris.datahub.aop.GroupingHandlerLogger" />

	<bean id="publicationGroupingHandlerAspect" class="com.hybris.datahub.aop.PublicationGroupingHandlerLogger" />

	<aop:config>
		<aop:aspect id="compositionHandlerLogger" ref="compositionRuleHandlerLoggerAspect">
			<aop:pointcut id="composePointcut"
						  expression="execution(* com.hybris.datahub.composition.CompositionRuleHandler+.compose(..))" />
			<aop:around method="aroundComposeAdvice" pointcut-ref="composePointcut" arg-names="proceedingJoinPoint" />
		</aop:aspect>

		<aop:aspect id="groupingHandlerLogger" ref="groupingHandlerLoggerAspect">
			<aop:pointcut id="groupPointcut" expression="execution(* com.hybris.datahub.grouping.GroupingHandler+.group(..))" />
			<aop:around method="aroundGroupAdvice" pointcut-ref="groupPointcut" arg-names="proceedingJoinPoint" />
		</aop:aspect>

		<aop:aspect id="publicationGroupingLogger" ref="publicationGroupingHandlerAspect">
			<aop:pointcut id="publicationGroupPointcut"
						  expression="execution(* com.hybris.datahub.grouping.PublicationGroupingHandler+.group(..))" />
			<aop:around method="aroundPublicationGroupingAdvice" pointcut-ref="publicationGroupPointcut"
						arg-names="proceedingJoinPoint" />
		</aop:aspect>
	</aop:config>
</beans>
