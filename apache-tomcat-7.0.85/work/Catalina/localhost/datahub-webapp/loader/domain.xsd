<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
		   xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.hybris.com/schema/ondemand/domain"
		   targetNamespace="http://www.hybris.com/schema/ondemand/domain"
		   elementFormDefault="qualified">
	<xs:element name="types">
		<xs:complexType>
			<xs:annotation>
				<xs:documentation>Defines the types of your extension.
				</xs:documentation>
			</xs:annotation>
			<xs:sequence>
				<xs:element name="enumerations" type="enumerationsType"
							minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines the list of EnumerationType's for your
							extension.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="valuetypes" type="valuetypesType"
							minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines the list of ValueType's for your
							extension.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="managedobjects" type="managedobjectsType"
							minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines the list of ComposedType's for your
							extension.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="package" type="xs:string" use="optional">
				<xs:annotation>
					<xs:documentation>The package used for generating code.
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="enumerationsType">
		<xs:annotation>
			<xs:documentation>
				Defines a list of enumeration types.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="enumeration" type="enumerationType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An EnumerationType defines fixed value types.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="enumerationType">
		<xs:annotation>
			<xs:documentation>An EnumerationType defines fixed value types.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Provides possibility to add meaningful
						description phrase for a generated class.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="codegeneration" type="codegenerationType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Allows to configure the code generation for this
						enumeration type.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="values" type="enumerationvaluesType"
						minOccurs="0">
				<xs:annotation>
					<xs:documentation>Configures one value of this Enumeration.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attribute name="code" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>The unique code of this Enumeration.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mixin" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					Declares that the enumeration definition should be merged to the one defined elsewhere. If 'true',
					the enum values will be merged to the existing ones. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="enumerationvaluesType">
		<xs:annotation>
			<xs:documentation>
				Defines a list of enumeration values.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="value" type="enumerationvalueType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Configures a list of enumeration value
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="enumerationvalueType">
		<xs:annotation>
			<xs:documentation>Configures a single enum value.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Provides possibility to add meaningful
						description phrase for a generated class.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="code" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>The unique code of this element.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="valuetypesType">
		<xs:annotation>
			<xs:documentation>
				Defines a list of value types.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="valuetype" type="valuetypeType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>A Value Type defines a custom immutable object having several properties of primitive/atomic
						types.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="valuetypeType">
		<xs:annotation>
			<xs:documentation>
				Specifies a single Value Type.
			</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Provides possibility to add meaningful
						description phrase for a generated class.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="attributes" type="valuetypeattributesType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines the list of attributes of the value type.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="codegeneration" type="codegenerationType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Allows to configure generation of this
						value type.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attribute name="code" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					The unique code of this value type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mixin" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					Declares that the valuetype definition should be merged to the one defined elsewhere. If 'true',
					the valuetype attributes will be merged to the existing ones. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deprecated" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					Declares that the value type definition should be deprecated. If 'true',
					the class will be marked as deprecated in the generated code. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="valuetypeattributesType">
		<xs:annotation>
			<xs:documentation>Configures a list of attributes of a value type.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="attribute" type="valuetypeattributeType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines a single attribute of a value type.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="valuetypeattributeType">
		<xs:annotation>
			<xs:documentation>
				Defines an attribute of a value type.
			</xs:documentation>
		</xs:annotation>

		<xs:all>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Gives a description for this attribute only used
						for the javadoc of generated attribute methods.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="defaultvalue" type="xs:string"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Configures a default value for this attribute
						used if no value is provided. The default value
						is calculated by
						initialization and will not be
						re-calculated by runtime.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

		</xs:all>
		<xs:attribute name="name" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					Name of this attribute. Attribute names
					must be unique across a single type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					The type of the attribute, such as 'Product',
					'int'
					or 'java.lang.String'. Primitive java types will be
					mapped to
					the corresponding atomic type. For
					example: 'int' will be mapped to
					the atomic type
					'java.lang.Integer' with implicit default value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deprecated" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					Marks the attribute as deprecated
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="codegenerationType">
		<xs:annotation>
			<xs:documentation>Configures code generation for a type element.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="generate" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Enables/disabled generation for this type element.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="class" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Configures custom full qualified class name.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="managedobjectsType">
		<xs:annotation>
			<xs:documentation>
				Defines a list of composed types.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="managedobject" type="managedobjectType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An ComposedType defines a data entity.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="managedobjectType">
		<xs:annotation>
			<xs:documentation>
				Specifies a specific ComposedType.
			</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Provides possibility to add meaningful
						description phrase for a generated class.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="versionattribute" type="versionAttributeType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines version attribute.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="attributes" type="attributesType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines the list of attributes.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pk" type="pkType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines list of the natural primary keys.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="codegeneration" type="codegenerationType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Allows to configure generation of this
						ComposedType.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="persistence" type="managedObjectPersistenceType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines how the values of the type will be
						stored.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="traits" type="traitsType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines the list of trait definitions.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attribute name="code" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					The unique code of this type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="extends" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
					Defines the class, which will be extended. Default
					is 'ManagedObject'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="abstract" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Marks type and jalo class as abstract. If 'true',
					the type can not be instantiated. Default is
					'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mixin" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Declares that the type definition should be merged to the one defined elsewhere. If 'true',
					the type attributes will be merged to the existing ones. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deprecated" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>
					Declares that the type definition should be deprecated. If 'true',
					the type will be marked as deprecated in the generated code. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="properties" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Marks this type to handle schemaless properties.
					Once enable cannot be disabled for subtypes. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tracked" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Marks all attributes of this type subject to kernel-level tracking.
					This is a convenience flag to quickly mark all type's attributes as tracked.
					If true, Kernel events for create, delete and update operations will carry information about previous and
					current value for all of this type's attributes.
					Value for this flag is inherited across type system hierarchy and can be overriden in subtypes.
					Default value is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="versionAttributeType">
		<xs:annotation>
			<xs:documentation>
				Defines a version attribute.
			</xs:documentation>
		</xs:annotation>

		<xs:sequence>
			<xs:element name="defaultvalue" type="xs:unsignedLong"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Configures a default value for this attribute
						used if no value is provided. The default value
						is calculated by
						initialization and will not be
						re-calculated by runtime.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>

		<xs:attribute name="name" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					Name of version attribute. Attribute
					names must be unique across a single type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>

	</xs:complexType>

	<xs:complexType name="traitsType">
		<xs:annotation>
			<xs:documentation>
				Defines the list of trait definitions.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="trait" type="ClassName" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines a single trait definition.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="attributesType">
		<xs:annotation>
			<xs:documentation>Configures a list of attributes.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="attribute" type="attributeType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines a single attribute.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="attributeType">
		<xs:annotation>
			<xs:documentation>
				Defines an attribute of a type.
			</xs:documentation>
		</xs:annotation>

		<xs:all>
			<xs:element name="relation" type="relationType" minOccurs="0"
						maxOccurs="1">
			</xs:element>
			<xs:element name="modifiers" type="modifiersType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Configures advanced settings for this attribute
						definition.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="defaultvalue" type="xs:string"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Configures a default value for this attribute
						used if no value is provided. The default value
						is calculated by
						initialization and will not be
						re-calculated by runtime.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="description" type="xs:string" minOccurs="0"
						maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Gives a description for this attribute only used
						for the javadoc of generated attribute methods.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="persistence" type="attributePersistenceType"
						minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>
						Defines how the values of the attribute will be
						stored.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="constraints" type="constraints" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Defines an optional list of JSR-303 constraints on the attribute
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attribute name="name" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					Name of this attribute. Attribute names
					must be unique across a single type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					The type of the attribute, such as 'Product',
					'int'
					or 'java.lang.String'. Primitive java types will be
					mapped to
					the corresponding atomic type. For
					example: 'int' will be mapped to
					the atomic type
					'java.lang.Integer' with implicit default value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="localized" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>Defines if specified attribute type will be
					localized
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deprecated" use="optional" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>
					Marks the attribute as deprecated
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>

	</xs:complexType>

	<xs:complexType name="relationType">
		<xs:choice minOccurs="0" maxOccurs="1">
			<xs:element name="one2many" type="relationMappingType">
				<xs:annotation>
					<xs:documentation>
						Defines a one to many mapping to another
						attribute.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="many2many" type="manyToManyType">
				<xs:annotation>
					<xs:documentation>
						Defines a one to many mapping to another
						attribute.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="modifiersType">
		<xs:annotation>
			<xs:documentation>Specifies further properties of an attribute..
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="mandatory" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>Defines if this attribute is mandatory or
					optional. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="partof" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Defines if the assigned attribute value only
					belongs to the current instance of this type. Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unique" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>If 'true', the value of this attribute has to be
					unique within all instances of this type. If there are multiple
					attributes marked as unique, then for each attribute unique constaint
					will be created. If you want to create composite unique constaint add
					index with unique=true in managedobject element.
					Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="indexed" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Defines if an index should be created for this attribute to speed up search operations that use this
					attribute.
					If there are multiple attributes marked as index then a separate index is provided for each attribute.
					To make a compound index from several attributes, an &lt;index&gt; tag has to be used
					in &lt;persistence&gt; element defined in &lt;managedobject&gt;
					Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="final" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Defines if value can be set only on creation. Setter is generated.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="tracked" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
					Marks this attribute subject to kernel-level tracking.
					If true Kernel events for create, delete and update operations will carry information about previous and
					current value of this attribute.
					Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="generated" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>
					Defines if value of this attribute is auto-generated using a sequence generator.
					If set to 'true', the value of such attribute is set on creation using a sequence value.
					Valid only for numeric types.
					Default is 'false'.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="managedObjectPersistenceType">
		<xs:annotation>
			<xs:documentation>Defines name of the persistence resource where type
				element should be stored.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="index" type="indexType"
						minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines a single index.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="identifier" use="optional">
			<xs:annotation>
				<xs:documentation>Name of the persistence resource where type
					element should be stored.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cacheable" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>Flag, indicating that the type will be available through the 2L cache in JPA.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="partOfOnly" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>Specifies that type can be used only in partOf relationships, not standalone
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="attributePersistenceType">
		<xs:annotation>
			<xs:documentation>Defines name of the persistence resource where type
				element should be stored.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="identifier">
			<xs:annotation>
				<xs:documentation>Name of the persistence resource where type
					element should be stored.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type">
			<xs:annotation>
				<xs:documentation>Allows to specify optional storage type for large String values (BLOB or CLOB)
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="BLOB" />
					<xs:enumeration value="CLOB" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="length" type="xs:nonNegativeInteger">
			<xs:annotation>
				<xs:documentation>Allows to specify max length for String values or maximum number of significant digits for
					numeric types. Valid only for String or numeric data types.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="precision" type="xs:nonNegativeInteger">
			<xs:annotation>
				<xs:documentation>Allows to specify precision (number of digits after decimal point) for numeric values. Valid
					only for numeric data types.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="indexType">
		<xs:annotation>
			<xs:documentation>Configures an index.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="attribute" type="indexAttributeType"
						minOccurs="1" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines an attribute that the index is based on.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>Name of the index</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unique" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>If true unique constraint will be created for defined index.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="indexAttributeType">
		<xs:annotation>
			<xs:documentation>Configures an attribute index.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="indexIdentifier" use="required">
			<xs:annotation>
				<xs:documentation>
					Name of the attribute.
					Must be one of the attribute names defined for the managedobject that defines the index.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="order" use="optional">
			<xs:annotation>
				<xs:documentation>
					Index order for the attribute.
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="asc" />
					<xs:enumeration value="desc" />
					<xs:enumeration value="geo2d" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="pkType">
		<xs:annotation>
			<xs:documentation>Configures natural primary keys.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="attribute" type="pkAttributeType"
						minOccurs="1" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Defines an attribute that natural primary key is based on.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="pkAttributeType">
		<xs:annotation>
			<xs:documentation>Configures an attribute natural primary key.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>
					Name of the attribute.
					Must be one of the attribute names defined for the managedobject.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="relationMappingType">
		<xs:annotation>
			<xs:documentation>Defines a relation definition.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="mappedBy" type="identifier" use="required">
			<xs:annotation>
				<xs:documentation>Defines to which counter attribute it will be
					mapped.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="manyToManyType">
		<xs:annotation>
			<xs:documentation>Defines a many2many relation definition.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="mappedBy" type="identifier" use="optional">
			<xs:annotation>
				<xs:documentation>Points to the corresponding attribute of the other side of relation which is responsible for
					keeping information about relation.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="counterpart" type="identifier" use="optional">
			<xs:annotation>
				<xs:documentation>Defines corresponding attribute on the other side of the relation. It is used at the side owning
					the ralation (responsible for storing its data).
					Cannot be used together with mappedBy since mappedBy tells us that it is the not owning side.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="constraints">
		<xsd:sequence minOccurs="1" maxOccurs="unbounded">
			<xsd:element name="constraint" type="constraint" />
		</xsd:sequence>
	</xs:complexType>
	<xs:complexType name="constraint">
		<xsd:annotation>
			<xsd:documentation>Defines a JSR-303 validation constraint. Note that @NotNull constraints are generated automatically
				when the attribute is mandatory.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="package" type="xs:string" use="optional" default="javax.validation.constraints">
			<xs:annotation>
				<xs:documentation>Defines the package JSR-303 to use to construct the fully qualified constraint name.
				</xs:documentation>
			</xs:annotation>
		</xsd:attribute>
		<xsd:attribute name="type" type="identifier">
			<xs:annotation>
				<xs:documentation>Defines the JSR-303 annotation to annotate the attribute with.
				</xs:documentation>
			</xs:annotation>
		</xsd:attribute>
		<xsd:attribute name="values" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Defines the JSR-303 annotation parameters to use. E.g.
					adding value="min=2, max=4" to a constraint of type "Size" will be transformed to
					@javax.validation.constraints.Size(min=2, max=4)
				</xs:documentation>
			</xs:annotation>
		</xsd:attribute>
	</xs:complexType>
	<xs:simpleType name="identifier">
		<xs:annotation>
			<xs:documentation>The identifier of this type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="([a-zA-Z_])+([a-z_A-Z$0-9])*" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="indexIdentifier">
		<xs:annotation>
			<xs:documentation>The identifier of index attribute. Dot is allowed to support value type members</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="([a-zA-Z_])+\.?([a-z_A-Z$0-9])*" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ClassName">
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="(([a-z][a-zA-Z_\-$0-9]*)[\.])*([A-Z][a-zA-Z_$0-9]*)" />
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
